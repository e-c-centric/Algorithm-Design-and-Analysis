// Comparison of backtracking(non-recursive) and recursive versions of the
// algorithms for solving the 8 Queen Problem

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class BackTrackingApproach {
    public static List<int[][]> uniqueSolutions = new ArrayList<>();

    /**
     * Solves the 8-Queen problem using backtracking (non-recursive approach). It
     * places queens on the board
     * iteratively. It places a queen in a row and then moves to the next row. If it
     * finds a safe position for the
     * queen, it places the queen and moves to the next row. If it doesn't find a
     * safe position, it backtracks and
     * tries the next column in the previous row.
     * 
     * @param board the board on which the queens are to be placed
     * 
     * @apiNote Time complexity analysis : In this approach, at each level branching
     *          factor decreases by 1 and it
     *          creates a new problem of size (n – 1) . With n choices, it creates n
     *          different problems of size (n –
     *          1) at level 1. isSafe method determines if the current position
     *          being considered is safe, and runs in
     *          O(n) time. There are n! possible configurations of the board, so the
     *          time complexity of the algorithm
     *          is O(n*n!) where n is the size of the board. The linear term arises
     *          from the isSafe method, which is
     *          called n times at each level.
     */
    public static void solve(Board board) {
        List<int[][]> solutions = new ArrayList<>();
        int size = board.getSize();
        Stack<int[]> queensPositions = new Stack<>();
        int j = 0;
        for (int i = 0; i < size;) { // i is the row index. The loop iterates over the rows of the board to place the
                                     // queens
            for (; j < size; j++) { // j is the column index. The loop iterates over the columns of the board to
                                    // place the queens
                // together with the backtracking logic within the loop, the time complexity of
                // the iteration is O(n!)
                if (board.isSafe(i, j)) { // checks if the current position is safe for the queen
                    // if the position is safe, the queen is placed on the board and the position is
                    // pushed onto the stack
                    // for every i,j pair generated by the loop, the isSafe method is called, which
                    // runs in O(n) time-, so the time complexity of the loop is O(n2 * n!)
                    board.setQueen(i, j);
                    queensPositions.push(new int[] { i, j });
                    break;
                }
            }
            if (queensPositions.size() != i + 1) {
                if (!queensPositions.empty()) { // if the stack is not empty, the last queen is removed from the board
                                                // and the position is popped from the stack
                                                // the loop is then set to the row of the last queen and the column of
                                                // the last queen + 1
                    int[] lastQueen = queensPositions.pop();
                    board.removeQueen(lastQueen[0]);
                    i = lastQueen[0];
                    j = lastQueen[1] + 1;
                    continue;
                }
            } else {
                j = 0; // if the queen was placed successfully, the column index is reset to 0
                       // (contributing
                       // to the O(n!) time complexity of the loop)
            }
            if (i == size - 1) {
                solutions.add(queensPositions.stream().map(int[]::clone).toArray(int[][]::new)); // if all queens have
                                                                                                 // been
                                                                                                 // placed, the
                                                                                                 // positions
                                                                                                 // are added to the
                                                                                                 // solutions list
                if (!queensPositions.empty()) {
                    int[] lastQueen = queensPositions.pop();
                    board.removeQueen(lastQueen[0]);
                    i = lastQueen[0]; // the last queen is removed from the board and the position is popped from the
                                      // stack (backtracking)
                    j = lastQueen[1] + 1;
                    continue;
                }
            }
            i++;
        }

        for (int[][] solution : solutions) {
            if (!solution.equals(solutions.get(0))) {
                uniqueSolutions.add(solution);
            }

        }
    }

    public static void main(String[] args) {
        Board board = new Board(8);
        long startTime = System.currentTimeMillis();
        solve(board);

        // board.print(uniqueSolutions); // prints the board with the all the solutions
        if (!uniqueSolutions.isEmpty()) {
            for (int[][] solution : uniqueSolutions) {
                for (int[] position : solution) {
                    System.out.print("(" + (position[0] + 1) + ", " + (position[1] + 1) + ") ");
                }
                System.out.println();
            }

        } else {
            System.out.println("No solution found");
        }
        long endTime = System.currentTimeMillis();
        long executionTime = endTime - startTime;

        System.out.println("Number of solutions: " + uniqueSolutions.size());
        System.out.println("Execution time: " + executionTime + " milliseconds");

    }

}